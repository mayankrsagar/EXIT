{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 3,
    "pending": 0,
    "failures": 5,
    "start": "2025-06-01T13:59:26.947Z",
    "end": "2025-06-01T13:59:35.314Z",
    "duration": 8367,
    "testsRegistered": 8,
    "passPercent": 37.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d8a4afd1-75c0-46e6-afc0-46f29b4f7a25",
      "title": "",
      "fullFile": "cypress\\integration\\backend\\backendTests.spec.js",
      "file": "cypress\\integration\\backend\\backendTests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6b4a1aa8-3e20-4393-a5d8-2a27568b26df",
          "title": "Backend API Tests for Employee and Admin Role",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a new employee",
              "fullTitle": "Backend API Tests for Employee and Admin Role should register a new employee",
              "timedOut": null,
              "duration": 1452,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${apiUrl}/auth/register`,\n  body: {\n    username: employeeUsername,\n    email: employeeEmail,\n    password: employeePassword\n  },\n  failOnStatusCode: false\n}).then(response => {\n  logIfBadStatus(response, 201);\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property(\"message\", \"User registered successfully\");\n});",
              "err": {},
              "uuid": "b3cc7c4d-77c5-435d-ba01-d4fa1485b1db",
              "parentUUID": "6b4a1aa8-3e20-4393-a5d8-2a27568b26df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login the employee with valid credentials",
              "fullTitle": "Backend API Tests for Employee and Admin Role should login the employee with valid credentials",
              "timedOut": null,
              "duration": 1130,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${apiUrl}/auth/login`,\n  body: {\n    email: employeeEmail,\n    password: employeePassword\n  },\n  failOnStatusCode: false\n}).then(response => {\n  logIfBadStatus(response, 200);\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property(\"token\");\n  Cypress.env(\"employeeAuthToken\", response.body.token);\n});",
              "err": {},
              "uuid": "e0ba2d1a-bc8e-4b7c-9353-f0058fbee050",
              "parentUUID": "6b4a1aa8-3e20-4393-a5d8-2a27568b26df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should submit resignation for an employee",
              "fullTitle": "Backend API Tests for Employee and Admin Role should submit resignation for an employee",
              "timedOut": null,
              "duration": 1522,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"employeeAuthToken\");\ncy.request({\n  method: \"POST\",\n  url: `${apiUrl}/user/resign`,\n  headers: {\n    Authorization: `Bearer ${token}`\n  },\n  body: {\n    intendedLastWorkingDay: \"2026-03-11T00:00:00.000Z\",\n    reason: \"nahi jana hai\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  logIfBadStatus(response, 201);\n  expect(response.status).to.eq(201);\n  // Now the data._id is at response.body.data._id\n  expect(response.body).to.have.nested.property(\"data._id\");\n  // Check that the returned data fields match what you sent:\n  expect(response.body.data).to.include({\n    intendedLastWorkingDay: \"2026-03-11T00:00:00.000Z\",\n    reason: \"nahi jana hai\",\n    status: \"Pending\",\n    exitDate: null,\n    decidedAt: null\n  });\n  // Store for the next tests\n  employeeResignationId = response.body.data._id;\n});",
              "err": {
                "message": "AssertionError: expected { Object (employee, intendedLastWorkingDay, ...) } to have property 'reason'",
                "estack": "AssertionError: expected { Object (employee, intendedLastWorkingDay, ...) } to have property 'reason'\n    at Context.eval (webpack://exitease/./cypress/integration/backend/backendTests.spec.js:94:34)",
                "diff": null
              },
              "uuid": "59306bc7-3948-4c14-a444-17b1b6bc86ed",
              "parentUUID": "6b4a1aa8-3e20-4393-a5d8-2a27568b26df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login as admin (HR)",
              "fullTitle": "Backend API Tests for Employee and Admin Role should login as admin (HR)",
              "timedOut": null,
              "duration": 985,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${apiUrl}/auth/login`,\n  body: {\n    email: \"admin@example.com\",\n    password: \"admin\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  logIfBadStatus(response, 200);\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property(\"token\");\n  Cypress.env(\"adminAuthToken\", response.body.token);\n});",
              "err": {},
              "uuid": "c239778f-ef74-4527-8693-c144452ef8db",
              "parentUUID": "6b4a1aa8-3e20-4393-a5d8-2a27568b26df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should view all resignations submitted by employees as admin",
              "fullTitle": "Backend API Tests for Employee and Admin Role should view all resignations submitted by employees as admin",
              "timedOut": null,
              "duration": 666,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"adminAuthToken\");\ncy.request({\n  method: \"GET\",\n  url: `${apiUrl}/admin/resignations`,\n  headers: {\n    Authorization: `Bearer ${token}`\n  },\n  failOnStatusCode: false\n}).then(response => {\n  logIfBadStatus(response, 200);\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.be.an(\"array\");\n  const found = response.body.data.some(r => r._id === employeeResignationId);\n  expect(found).to.be.true;\n});",
              "err": {
                "message": "AssertionError: expected 500 to equal 200",
                "estack": "AssertionError: expected 500 to equal 200\n    at Context.eval (webpack://exitease/./cypress/integration/backend/backendTests.spec.js:139:33)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "1a2ac37d-7e45-4bec-ae7c-63cc2977c943",
              "parentUUID": "6b4a1aa8-3e20-4393-a5d8-2a27568b26df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should approve the employee’s resignation as admin",
              "fullTitle": "Backend API Tests for Employee and Admin Role should approve the employee’s resignation as admin",
              "timedOut": null,
              "duration": 501,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"adminAuthToken\");\ncy.request({\n  method: \"PUT\",\n  url: `${apiUrl}/admin/conclude_resignation`,\n  headers: {\n    Authorization: `Bearer ${token}`\n    // Cypress will set “Content-Type” for you, so you can omit it here\n  },\n  body: {\n    resignationId: employeeResignationId,\n    approved: true,\n    // Use exactly the same date‐string format you verified in Postman:\n    intendedLastWorkingDay: \"2026-03-11\",\n    exitDate: \"2028-10-11\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  // dump the entire response to console first, so you can see any validation errors:\n  console.log(\"PUT /applicate→admin/conclude_resignation RESP:\", response);\n  // Now assert that server returns 200 OK\n  logIfBadStatus(response, 200);\n  expect(response.status).to.eq(200);\n  // Finally check that “status” has been updated to “Approved”:\n  expect(response.body.data).to.have.property(\"status\", \"Approved\");\n});",
              "err": {
                "message": "AssertionError: expected 500 to equal 200",
                "estack": "AssertionError: expected 500 to equal 200\n    at Context.eval (webpack://exitease/./cypress/integration/backend/backendTests.spec.js:174:31)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "730fb02e-8237-46b2-9c3b-ae7efac7d5af",
              "parentUUID": "6b4a1aa8-3e20-4393-a5d8-2a27568b26df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow the employee to submit responses to exit questionnaire",
              "fullTitle": "Backend API Tests for Employee and Admin Role should allow the employee to submit responses to exit questionnaire",
              "timedOut": null,
              "duration": 907,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"employeeAuthToken\");\ncy.request({\n  method: \"POST\",\n  url: `${apiUrl}/user/responses`,\n  headers: {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json\"\n  },\n  body: {\n    resignationId: employeeResignationId,\n    responses: [{\n      questionText: \"What prompted you to start looking for another job?\",\n      response: \"Lack of career growth opportunities\"\n    }, {\n      questionText: \"Would you recommend this company to others?\",\n      response: \"Yes, with some reservations\"\n    }]\n  },\n  failOnStatusCode: false\n}).then(response => {\n  logIfBadStatus(response, 200);\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.have.property(\"resignationId\", employeeResignationId);\n});",
              "err": {
                "message": "AssertionError: Target cannot be null or undefined.",
                "estack": "AssertionError: Target cannot be null or undefined.\n    at Context.eval (webpack://exitease/./cypress/integration/backend/backendTests.spec.js:210:6)",
                "diff": null
              },
              "uuid": "f8361b0d-6815-4b4f-92b5-d871221a8e34",
              "parentUUID": "6b4a1aa8-3e20-4393-a5d8-2a27568b26df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow the admin to view all questionnaire responses",
              "fullTitle": "Backend API Tests for Employee and Admin Role should allow the admin to view all questionnaire responses",
              "timedOut": null,
              "duration": 945,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const token = Cypress.env(\"adminAuthToken\");\ncy.request({\n  method: \"GET\",\n  url: `${apiUrl}/admin/exit_responses`,\n  headers: {\n    Authorization: `Bearer ${token}`\n  },\n  failOnStatusCode: false\n}).then(response => {\n  logIfBadStatus(response, 200);\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.be.an(\"array\");\n  const expected = [{\n    questionText: \"What prompted you to start looking for another job?\",\n    response: \"Lack of career growth opportunities\"\n  }, {\n    questionText: \"Would you recommend this company to others?\",\n    response: \"Yes, with some reservations\"\n  }];\n  const found = response.body.data.some(item => {\n    if (item.resignationId !== employeeResignationId) return false;\n    return Array.isArray(item.responses) && item.responses.length === expected.length && item.responses.every((resp, i) => {\n      return resp.questionText === expected[i].questionText && resp.response === expected[i].response;\n    });\n  });\n  expect(found).to.be.true;\n});",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at Context.eval (webpack://exitease/./cypress/integration/backend/backendTests.spec.js:256:26)",
                "diff": null
              },
              "uuid": "564366f8-9931-4902-8e83-c93ab817e28b",
              "parentUUID": "6b4a1aa8-3e20-4393-a5d8-2a27568b26df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3cc7c4d-77c5-435d-ba01-d4fa1485b1db",
            "e0ba2d1a-bc8e-4b7c-9353-f0058fbee050",
            "c239778f-ef74-4527-8693-c144452ef8db"
          ],
          "failures": [
            "59306bc7-3948-4c14-a444-17b1b6bc86ed",
            "1a2ac37d-7e45-4bec-ae7c-63cc2977c943",
            "730fb02e-8237-46b2-9c3b-ae7efac7d5af",
            "f8361b0d-6815-4b4f-92b5-d871221a8e34",
            "564366f8-9931-4902-8e83-c93ab817e28b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8108,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "my-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "json": true,
        "reportsDir": "reports/your-reports-folder",
        "reportFilename": "my-report",
        "overwrite": false
      },
      "version": "6.2.0"
    }
  }
}