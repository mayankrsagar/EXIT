{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-31T20:22:51.817Z",
    "end": "2025-05-31T20:22:53.996Z",
    "duration": 2179,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "350a02ba-de62-482b-a0c6-0f2d086623f2",
      "title": "",
      "fullFile": "cypress\\integration\\backend\\backendTests.spec.js",
      "file": "cypress\\integration\\backend\\backendTests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1b36bddd-836b-489b-a94d-80850178b011",
          "title": "Backend API Tests for Employee and Admin Role",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a new employee",
              "fullTitle": "Backend API Tests for Employee and Admin Role should register a new employee",
              "timedOut": null,
              "duration": 270,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `${baseUrl}/api/auth/register`,\n  body: {\n    username: employeeUsername,\n    password: 'password123'\n  },\n  timeout: 30000 // Increase timeout for local testing\n}).then(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property('message', 'User registered successfully');\n});",
              "err": {},
              "uuid": "d818e0a7-d47e-4a7c-b3b4-bdd5c9a32261",
              "parentUUID": "1b36bddd-836b-489b-a94d-80850178b011",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login the employee with valid credentials",
              "fullTitle": "Backend API Tests for Employee and Admin Role should login the employee with valid credentials",
              "timedOut": null,
              "duration": 119,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `${baseUrl}/api/auth/login`,\n  body: {\n    username: employeeUsername,\n    password: 'password123'\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('token');\n  employeeToken = response.body.token;\n});",
              "err": {},
              "uuid": "073e2ec6-1df4-45da-85fc-62a8d519db98",
              "parentUUID": "1b36bddd-836b-489b-a94d-80850178b011",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should submit resignation for an employee",
              "fullTitle": "Backend API Tests for Employee and Admin Role should submit resignation for an employee",
              "timedOut": null,
              "duration": 1226,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `${baseUrl}/api/user/resign`,\n  headers: {\n    Authorization: employeeToken\n  },\n  body: {\n    intendedLastWorkingDay: \"2024-12-26\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.have.property('resignation');\n  expect(response.body.data.resignation).to.have.property('_id');\n  resignationId = response.body.data.resignation._id;\n});",
              "err": {},
              "uuid": "1dede3c9-f712-4ed4-afbf-f1c6fda3f92b",
              "parentUUID": "1b36bddd-836b-489b-a94d-80850178b011",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login as admin (HR)",
              "fullTitle": "Backend API Tests for Employee and Admin Role should login as admin (HR)",
              "timedOut": null,
              "duration": 118,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `${baseUrl}/api/auth/login`,\n  body: {\n    username: 'admin',\n    password: 'admin'\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('token');\n  adminToken = response.body.token;\n});",
              "err": {},
              "uuid": "c7c570f6-d32d-48a4-8588-4d06e8a345a8",
              "parentUUID": "1b36bddd-836b-489b-a94d-80850178b011",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should view all resignations submitted by employees as admin",
              "fullTitle": "Backend API Tests for Employee and Admin Role should view all resignations submitted by employees as admin",
              "timedOut": null,
              "duration": 93,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${baseUrl}/api/admin/resignations`,\n  headers: {\n    Authorization: adminToken\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.be.an('array');\n  // Verify our test resignation is in the list\n  const testResignation = response.body.data.find(r => r._id === resignationId);\n  expect(testResignation).to.exist;\n});",
              "err": {},
              "uuid": "b06c1ccf-ebb0-43a9-b6b2-e8e841645705",
              "parentUUID": "1b36bddd-836b-489b-a94d-80850178b011",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should approve the employee’s resignation as admin",
              "fullTitle": "Backend API Tests for Employee and Admin Role should approve the employee’s resignation as admin",
              "timedOut": null,
              "duration": 52,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: `${baseUrl}/api/admin/conclude_resignation`,\n  headers: {\n    Authorization: adminToken\n  },\n  body: {\n    resignationId: resignationId,\n    approved: true,\n    lwd: \"2024-12-26\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.have.property('status', 'Approved');\n});",
              "err": {},
              "uuid": "0aaf057e-fe2e-4c9f-a70b-fb59571c578f",
              "parentUUID": "1b36bddd-836b-489b-a94d-80850178b011",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow the employee to submit responses to exit questionnaire",
              "fullTitle": "Backend API Tests for Employee and Admin Role should allow the employee to submit responses to exit questionnaire",
              "timedOut": null,
              "duration": 58,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `${baseUrl}/api/user/responses`,\n  headers: {\n    Authorization: employeeToken\n  },\n  body: {\n    responses: [{\n      questionText: \"What prompted you to start looking for another job?\",\n      response: \"Lack of career growth opportunities\"\n    }, {\n      questionText: \"Would you recommend this company to others?\",\n      response: \"Yes, with some reservations\"\n    }]\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('message', 'Exit interview submitted');\n});",
              "err": {},
              "uuid": "5ea47510-a9d4-47ca-902b-6c0eae36c586",
              "parentUUID": "1b36bddd-836b-489b-a94d-80850178b011",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow the admin to view all questionnaire responses",
              "fullTitle": "Backend API Tests for Employee and Admin Role should allow the admin to view all questionnaire responses",
              "timedOut": null,
              "duration": 77,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${baseUrl}/api/admin/exit_responses`,\n  headers: {\n    Authorization: adminToken\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.be.an('array');\n  expect(response.body.data[0]).to.have.property('employeeId');\n  expect(response.body.data[0]).to.have.property('responses').that.is.an('array');\n});",
              "err": {},
              "uuid": "ecdd8dfc-3709-49a0-a657-80723f35f129",
              "parentUUID": "1b36bddd-836b-489b-a94d-80850178b011",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d818e0a7-d47e-4a7c-b3b4-bdd5c9a32261",
            "073e2ec6-1df4-45da-85fc-62a8d519db98",
            "1dede3c9-f712-4ed4-afbf-f1c6fda3f92b",
            "c7c570f6-d32d-48a4-8588-4d06e8a345a8",
            "b06c1ccf-ebb0-43a9-b6b2-e8e841645705",
            "0aaf057e-fe2e-4c9f-a70b-fb59571c578f",
            "5ea47510-a9d4-47ca-902b-6c0eae36c586",
            "ecdd8dfc-3709-49a0-a657-80723f35f129"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2013,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "my-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "json": true,
        "reportsDir": "reports/your-reports-folder",
        "reportFilename": "my-report",
        "overwrite": false
      },
      "version": "6.2.0"
    }
  }
}