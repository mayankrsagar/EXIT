{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-31T20:40:55.742Z",
    "end": "2025-05-31T20:40:57.001Z",
    "duration": 1259,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8692a4f9-d6ee-4414-a16c-34bd88d7d4f6",
      "title": "",
      "fullFile": "cypress\\integration\\backend\\backendTests.spec.js",
      "file": "cypress\\integration\\backend\\backendTests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4e713cf3-6115-44df-905d-9d538c434d2b",
          "title": "Backend API Tests for Employee and Admin Role",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a new employee",
              "fullTitle": "Backend API Tests for Employee and Admin Role should register a new employee",
              "timedOut": null,
              "duration": 188,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `${baseUrl}/api/auth/register`,\n  body: {\n    username: employeeUsername,\n    password: 'password123'\n  },\n  timeout: 30000 // Increase timeout for local testing\n}).then(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property('message', 'User registered successfully');\n});",
              "err": {},
              "uuid": "23ecbfd6-1173-4d4a-96e9-5bf40a8b568c",
              "parentUUID": "4e713cf3-6115-44df-905d-9d538c434d2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login the employee with valid credentials",
              "fullTitle": "Backend API Tests for Employee and Admin Role should login the employee with valid credentials",
              "timedOut": null,
              "duration": 110,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `${baseUrl}/api/auth/login`,\n  body: {\n    username: employeeUsername,\n    password: 'password123'\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('token');\n  employeeToken = response.body.token;\n});",
              "err": {},
              "uuid": "db2f1440-79ef-41e1-a91d-cb70e879b85e",
              "parentUUID": "4e713cf3-6115-44df-905d-9d538c434d2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should submit resignation for an employee",
              "fullTitle": "Backend API Tests for Employee and Admin Role should submit resignation for an employee",
              "timedOut": null,
              "duration": 548,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `${baseUrl}/api/user/resign`,\n  headers: {\n    Authorization: employeeToken\n  },\n  body: {\n    intendedLastWorkingDay: \"2024-12-26\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.have.property('resignation');\n  expect(response.body.data.resignation).to.have.property('_id');\n  resignationId = response.body.data.resignation._id;\n});",
              "err": {},
              "uuid": "4399b05b-3a34-4727-8896-cec36e3bc62b",
              "parentUUID": "4e713cf3-6115-44df-905d-9d538c434d2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login as admin (HR)",
              "fullTitle": "Backend API Tests for Employee and Admin Role should login as admin (HR)",
              "timedOut": null,
              "duration": 98,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `${baseUrl}/api/auth/login`,\n  body: {\n    username: 'admin',\n    password: 'admin'\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('token');\n  adminToken = response.body.token;\n});",
              "err": {},
              "uuid": "9e312f12-5cb4-4b02-b50f-3bca9c8b85fd",
              "parentUUID": "4e713cf3-6115-44df-905d-9d538c434d2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should view all resignations submitted by employees as admin",
              "fullTitle": "Backend API Tests for Employee and Admin Role should view all resignations submitted by employees as admin",
              "timedOut": null,
              "duration": 60,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${baseUrl}/api/admin/resignations`,\n  headers: {\n    Authorization: adminToken\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.be.an('array');\n  // Verify our test resignation is in the list\n  const testResignation = response.body.data.find(r => r._id === resignationId);\n  expect(testResignation).to.exist;\n});",
              "err": {},
              "uuid": "0d3345b0-c7ca-4834-8faa-29822a2445ef",
              "parentUUID": "4e713cf3-6115-44df-905d-9d538c434d2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should approve the employee’s resignation as admin",
              "fullTitle": "Backend API Tests for Employee and Admin Role should approve the employee’s resignation as admin",
              "timedOut": null,
              "duration": 48,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: `${baseUrl}/api/admin/conclude_resignation`,\n  headers: {\n    Authorization: adminToken\n  },\n  body: {\n    resignationId: resignationId,\n    approved: true,\n    lwd: \"2024-12-26\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.have.property('status', 'Approved');\n});",
              "err": {},
              "uuid": "faf3b554-20bd-4813-b132-4c7cc28d2485",
              "parentUUID": "4e713cf3-6115-44df-905d-9d538c434d2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow the employee to submit responses to exit questionnaire",
              "fullTitle": "Backend API Tests for Employee and Admin Role should allow the employee to submit responses to exit questionnaire",
              "timedOut": null,
              "duration": 45,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `${baseUrl}/api/user/responses`,\n  headers: {\n    Authorization: employeeToken\n  },\n  body: {\n    responses: [{\n      questionText: \"What prompted you to start looking for another job?\",\n      response: \"Lack of career growth opportunities\"\n    }, {\n      questionText: \"Would you recommend this company to others?\",\n      response: \"Yes, with some reservations\"\n    }]\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('message', 'Exit interview submitted');\n});",
              "err": {},
              "uuid": "88e4f796-9b0d-4f42-bb5c-7c89d14fe88e",
              "parentUUID": "4e713cf3-6115-44df-905d-9d538c434d2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow the admin to view all questionnaire responses",
              "fullTitle": "Backend API Tests for Employee and Admin Role should allow the admin to view all questionnaire responses",
              "timedOut": null,
              "duration": 53,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${baseUrl}/api/admin/exit_responses`,\n  headers: {\n    Authorization: adminToken\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.be.an('array');\n  expect(response.body.data[0]).to.have.property('employeeId');\n  expect(response.body.data[0]).to.have.property('responses').that.is.an('array');\n});",
              "err": {},
              "uuid": "986ad7e5-8263-4f70-8678-a7a80c91bcc9",
              "parentUUID": "4e713cf3-6115-44df-905d-9d538c434d2b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "23ecbfd6-1173-4d4a-96e9-5bf40a8b568c",
            "db2f1440-79ef-41e1-a91d-cb70e879b85e",
            "4399b05b-3a34-4727-8896-cec36e3bc62b",
            "9e312f12-5cb4-4b02-b50f-3bca9c8b85fd",
            "0d3345b0-c7ca-4834-8faa-29822a2445ef",
            "faf3b554-20bd-4813-b132-4c7cc28d2485",
            "88e4f796-9b0d-4f42-bb5c-7c89d14fe88e",
            "986ad7e5-8263-4f70-8678-a7a80c91bcc9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1150,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "my-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "json": true,
        "reportsDir": "reports/your-reports-folder",
        "reportFilename": "my-report",
        "overwrite": false
      },
      "version": "6.2.0"
    }
  }
}